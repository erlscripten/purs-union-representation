if (Benchmark === undefined) {
    var Benchmark = require('benchmark');
}
var suite = new Benchmark.Suite;

// add tests
suite.add('Baseline Purescript', function() {

// Generated by purs version 0.13.8
"use strict";
var Literal = (function () {
    function Literal(value0) {
        this.value0 = value0;
    };
    Literal.create = function (value0) {
        return new Literal(value0);
    };
    return Literal;
})();
var AddOne = (function () {
    function AddOne(value0) {
        this.value0 = value0;
    };
    AddOne.create = function (value0) {
        return new AddOne(value0);
    };
    return AddOne;
})();
var AddTwo = (function () {
    function AddTwo(value0) {
        this.value0 = value0;
    };
    AddTwo.create = function (value0) {
        return new AddTwo(value0);
    };
    return AddTwo;
})();
var AddThree = (function () {
    function AddThree(value0) {
        this.value0 = value0;
    };
    AddThree.create = function (value0) {
        return new AddThree(value0);
    };
    return AddThree;
})();
var AddFour = (function () {
    function AddFour(value0) {
        this.value0 = value0;
    };
    AddFour.create = function (value0) {
        return new AddFour(value0);
    };
    return AddFour;
})();
var AddFive = (function () {
    function AddFive(value0) {
        this.value0 = value0;
    };
    AddFive.create = function (value0) {
        return new AddFive(value0);
    };
    return AddFive;
})();
var Add = (function () {
    function Add(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Add.create = function (value0) {
        return function (value1) {
            return new Add(value0, value1);
        };
    };
    return Add;
})();
var SubOne = (function () {
    function SubOne(value0) {
        this.value0 = value0;
    };
    SubOne.create = function (value0) {
        return new SubOne(value0);
    };
    return SubOne;
})();
var SubTwo = (function () {
    function SubTwo(value0) {
        this.value0 = value0;
    };
    SubTwo.create = function (value0) {
        return new SubTwo(value0);
    };
    return SubTwo;
})();
var SubThree = (function () {
    function SubThree(value0) {
        this.value0 = value0;
    };
    SubThree.create = function (value0) {
        return new SubThree(value0);
    };
    return SubThree;
})();
var SubFour = (function () {
    function SubFour(value0) {
        this.value0 = value0;
    };
    SubFour.create = function (value0) {
        return new SubFour(value0);
    };
    return SubFour;
})();
var SubFive = (function () {
    function SubFive(value0) {
        this.value0 = value0;
    };
    SubFive.create = function (value0) {
        return new SubFive(value0);
    };
    return SubFive;
})();
var Sub = (function () {
    function Sub(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Sub.create = function (value0) {
        return function (value1) {
            return new Sub(value0, value1);
        };
    };
    return Sub;
})();
var $$eval = function (v) {
    if (v instanceof Literal) {
        return v.value0;
    };
    if (v instanceof AddOne) {
        return $$eval(new Add(v.value0, new Literal(1)));
    };
    if (v instanceof AddTwo) {
        return $$eval(new Add(v.value0, new Literal(2)));
    };
    if (v instanceof AddThree) {
        return $$eval(new Add(v.value0, new Literal(3)));
    };
    if (v instanceof AddFour) {
        return $$eval(new Add(v.value0, new Literal(4)));
    };
    if (v instanceof AddFive) {
        return $$eval(new Add(v.value0, new Literal(5)));
    };
    if (v instanceof Add) {
        return $$eval(v.value0) + $$eval(v.value1) | 0;
    };
    if (v instanceof SubOne) {
        return $$eval(new Sub(v.value0, new Literal(1)));
    };
    if (v instanceof SubTwo) {
        return $$eval(new Sub(v.value0, new Literal(2)));
    };
    if (v instanceof SubThree) {
        return $$eval(new Sub(v.value0, new Literal(3)));
    };
    if (v instanceof SubFour) {
        return $$eval(new Sub(v.value0, new Literal(4)));
    };
    if (v instanceof SubFive) {
        return $$eval(new Sub(v.value0, new Literal(5)));
    };
    if (v instanceof Sub) {
        return $$eval(v.value0) - $$eval(v.value1) | 0;
    };
    throw new Error("Failed pattern match at Bench2 (line 18, column 1 - line 18, column 20): " + [ v.constructor.name ]);
};
var c2 = function (a) {
    return AddOne.create(AddTwo.create(AddThree.create(AddFour.create(new AddFive(new Literal(a))))));
};
var c1 = function (a) {
    return SubOne.create(SubTwo.create(SubThree.create(SubFour.create(new SubFive(new Literal(a))))));
};
var main = $$eval(new Sub(new Add(c1(1337), c2(1337)), new Add(c2(1337), c1(1337))));


})

.add('Erlscripten Purescript', function() {

// Generated by purs version 0.13.8. Patched for erlscripten!
"use strict";
let Literal = (function () {
    function Literal(value0) {
        this.value0 = value0;
    };
    Literal.create = function (value0) {
        return new Literal(value0);
    };
    return Literal;
})();
let AddOne = (function () {
    function AddOne(value0) {
        this.value0 = value0;
    };
    AddOne.create = function (value0) {
        return new AddOne(value0);
    };
    return AddOne;
})();
let AddTwo = (function () {
    function AddTwo(value0) {
        this.value0 = value0;
    };
    AddTwo.create = function (value0) {
        return new AddTwo(value0);
    };
    return AddTwo;
})();
let AddThree = (function () {
    function AddThree(value0) {
        this.value0 = value0;
    };
    AddThree.create = function (value0) {
        return new AddThree(value0);
    };
    return AddThree;
})();
let AddFour = (function () {
    function AddFour(value0) {
        this.value0 = value0;
    };
    AddFour.create = function (value0) {
        return new AddFour(value0);
    };
    return AddFour;
})();
let AddFive = (function () {
    function AddFive(value0) {
        this.value0 = value0;
    };
    AddFive.create = function (value0) {
        return new AddFive(value0);
    };
    return AddFive;
})();
let Add = (function () {
    function Add(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Add.create = function (value0) {
        return function (value1) {
            return new Add(value0, value1);
        };
    };
    return Add;
})();
let SubOne = (function () {
    function SubOne(value0) {
        this.value0 = value0;
    };
    SubOne.create = function (value0) {
        return new SubOne(value0);
    };
    return SubOne;
})();
let SubTwo = (function () {
    function SubTwo(value0) {
        this.value0 = value0;
    };
    SubTwo.create = function (value0) {
        return new SubTwo(value0);
    };
    return SubTwo;
})();
let SubThree = (function () {
    function SubThree(value0) {
        this.value0 = value0;
    };
    SubThree.create = function (value0) {
        return new SubThree(value0);
    };
    return SubThree;
})();
let SubFour = (function () {
    function SubFour(value0) {
        this.value0 = value0;
    };
    SubFour.create = function (value0) {
        return new SubFour(value0);
    };
    return SubFour;
})();
let SubFive = (function () {
    function SubFive(value0) {
        this.value0 = value0;
    };
    SubFive.create = function (value0) {
        return new SubFive(value0);
    };
    return SubFive;
})();
let Sub = (function () {
    function Sub(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Sub.create = function (value0) {
        return function (value1) {
            return new Sub(value0, value1);
        };
    };
    return Sub;
})();
let $$eval = function ($copy_v) {
    $tco_loop: while (true) {
        let v = $copy_v;
        if (v instanceof Literal) {
            return v.value0;
        };
        if (v instanceof AddOne) {
            $copy_v = new Add(v.value0, new Literal(1));
            continue $tco_loop;
        };
        if (v instanceof AddTwo) {
            $copy_v = new Add(v.value0, new Literal(2));
            continue $tco_loop;
        };
        if (v instanceof AddThree) {
            $copy_v = new Add(v.value0, new Literal(3));
            continue $tco_loop;
        };
        if (v instanceof AddFour) {
            $copy_v = new Add(v.value0, new Literal(4));
            continue $tco_loop;
        };
        if (v instanceof AddFive) {
            $copy_v = new Add(v.value0, new Literal(5));
            continue $tco_loop;
        };
        if (v instanceof Add) {
            return $$eval(v.value0) + $$eval(v.value1) | 0;
        };
        if (v instanceof SubOne) {
            $copy_v = new Sub(v.value0, new Literal(1));
            continue $tco_loop;
        };
        if (v instanceof SubTwo) {
            $copy_v = new Sub(v.value0, new Literal(2));
            continue $tco_loop;
        };
        if (v instanceof SubThree) {
            $copy_v = new Sub(v.value0, new Literal(3));
            continue $tco_loop;
        };
        if (v instanceof SubFour) {
            $copy_v = new Sub(v.value0, new Literal(4));
            continue $tco_loop;
        };
        if (v instanceof SubFive) {
            $copy_v = new Sub(v.value0, new Literal(5));
            continue $tco_loop;
        };
        if (v instanceof Sub) {
            return $$eval(v.value0) - $$eval(v.value1) | 0;
        };
        throw new Error("Failed pattern match at Bench2 (line 18, column 1 - line 18, column 20): " + [ v.constructor.name ]);
    };
};
let c2 = function (a) {
    return AddOne.create(AddTwo.create(AddThree.create(AddFour.create(new AddFive(new Literal(a))))));
};
let c1 = function (a) {
    return SubOne.create(SubTwo.create(SubThree.create(SubFour.create(new SubFive(new Literal(a))))));
};
let main = $$eval(new Sub(new Add(c1(1337), c2(1337)), new Add(c2(1337), c1(1337))));


})

.add('Baseline Purescript + Array with String tag', function() {

var $$eval = function (v) {
    if (v[0] === "Literal") {
        return v[1];
    };
    if (v[0] === "AddOne") {
        return $$eval(["Add", v[1], ["Literal", 1]]);
    };
    if (v[0] === "AddTwo") {
        return $$eval(["Add", v[1], ["Literal", 2]]);
    };
    if (v[0] === "AddThree") {
        return $$eval(["Add", v[1], ["Literal", 3]]);
    };
    if (v[0] === "AddFour") {
        return $$eval(["Add", v[1], ["Literal", 4]]);
    };
    if (v[0] === "AddFive") {
        return $$eval(["Add", v[1], ["Literal", 5]]);
    };
    if (v[0] === "Add") {
        return $$eval(v[1]) + $$eval(v[2]) | 0;
    };
    if (v[0] === "SubOne") {
        return $$eval(["Sub", v[1], ["Literal", 1]]);
    };
    if (v[0] === "SubTwo") {
        return $$eval(["Sub", v[1], ["Literal", 2]]);
    };
    if (v[0] === "SubThree") {
        return $$eval(["Sub", v[1], ["Literal", 3]]);
    };
    if (v[0] === "SubFour") {
        return $$eval(["Sub", v[1], ["Literal", 4]]);
    };
    if (v[0] === "SubFive") {
        return $$eval(["Sub", v[1], ["Literal", 5]]);
    };
    if (v[0] === "Sub") {
        return $$eval(v[1]) - $$eval(v[2]) | 0;
    };
    throw new Error("Failed pattern match at Bench2 (line 18, column 1 - line 18, column 20): " + [ v[0] ]);
};
var c2 = function (a) {
    return ["AddOne", ["AddTwo", ["AddThree", ["AddFour", ["AddFive", ["Literal", a]]]]]];
};
var c1 = function (a) {
    return ["SubOne", ["SubTwo", ["SubThree", ["SubFour", ["SubFive", ["Literal", a]]]]]];
};
var main = $$eval(["Sub", ["Add", c1(1337), c2(1337)], ["Add", c2(1337), c1(1337)]]);


})

.add('Erlscripten Purescript + Array with String tag', function() {

let $$eval = function ($copy_v) {
    $tco_loop: while (true) {
        let v = $copy_v;
        if (v[0] === "Literal") {
            return v[1];
        };
        if (v[0] === "AddOne") {
            $copy_v = ["Add", v[1], ["Literal", 1]];
            continue $tco_loop;
        };
        if (v[0] === "AddTwo") {
            $copy_v = ["Add", v[1], ["Literal", 2]];
            continue $tco_loop;
        };
        if (v[0] === "AddThree") {
            $copy_v = ["Add", v[1], ["Literal", 3]];
            continue $tco_loop;
        };
        if (v[0] === "AddFour") {
            $copy_v = ["Add", v[1], ["Literal", 4]];
            continue $tco_loop;
        };
        if (v[0] === "AddFive") {
            $copy_v = ["Add", v[1], ["Literal", 5]];
            continue $tco_loop;
        };
        if (v[0] === "Add") {
            return $$eval(v[1]) + $$eval(v[2]) | 0;
        };
        if (v[0] === "SubOne") {
            $copy_v = ["Sub", v[1], ["Literal", 1]];
            continue $tco_loop;
        };
        if (v[0] === "SubTwo") {
            $copy_v = ["Sub", v[1], ["Literal", 2]];
            continue $tco_loop;
        };
        if (v[0] === "SubThree") {
            $copy_v = ["Sub", v[1], ["Literal", 3]];
            continue $tco_loop;
        };
        if (v[0] === "SubFour") {
            $copy_v = ["Sub", v[1], ["Literal", 4]];
            continue $tco_loop;
        };
        if (v[0] === "SubFive") {
            $copy_v = ["Sub", v[1], ["Literal", 5]];
            continue $tco_loop;
        };
        if (v[0] === "Sub") {
            return $$eval(v[1]) - $$eval(v[2]) | 0;
        };
        throw new Error("Failed pattern match at Bench2 (line 18, column 1 - line 18, column 20): " + [ v[0] ]);
    };
};

let c2 = function (a) {
    return ["AddOne", ["AddTwo", ["AddThree", ["AddFour", ["AddFive", ["Literal", a]]]]]];
};
let c1 = function (a) {
    return ["SubOne", ["SubTwo", ["SubThree", ["SubFour", ["SubFive", ["Literal", a]]]]]];
};
let main = $$eval(["Sub", ["Add", c1(1337), c2(1337)], ["Add", c2(1337), c1(1337)]]);

})


.add('Baseline Purescript + Array with Int tag', function() {


var $$eval = function (v) {
    if (v[0] === 0) {
        return v[1];
    };
    if (v[0] === 1) {
        return $$eval([6, v[1], [0, 1]]);
    };
    if (v[0] === 2) {
        return $$eval([6, v[1], [0, 2]]);
    };
    if (v[0] === 3) {
        return $$eval([6, v[1], [0, 3]]);
    };
    if (v[0] === 4) {
        return $$eval([6, v[1], [0, 4]]);
    };
    if (v[0] === 5) {
        return $$eval([6, v[1], [0, 5]]);
    };
    if (v[0] === 6) {
        return $$eval(v[1]) + $$eval(v[2]) | 0;
    };
    if (v[0] === 7) {
        return $$eval([12, v[1], [0, 1]]);
    };
    if (v[0] === 8) {
        return $$eval([12, v[1], [0, 2]]);
    };
    if (v[0] === 9) {
        return $$eval([12, v[1], [0, 3]]);
    };
    if (v[0] === 10) {
        return $$eval([12, v[1], [0, 4]]);
    };
    if (v[0] === 11) {
        return $$eval([12, v[1], [0, 5]]);
    };
    if (v[0] === 12) {
        return $$eval(v[1]) - $$eval(v[2]) | 0;
    };
    throw new Error("Failed pattern match at Bench2 (line 18, column 1 - line 18, column 20): " + [ v[0] ]);
};
var c2 = function (a) {
    return [1, [2, [3, [4, [5, [0, a]]]]]];
};
var c1 = function (a) {
    return [7, [8, [9, [10, [11, [0, a]]]]]];
};
var main = $$eval([12, [6, c1(1337), c2(1337)], [6, c2(1337), c1(1337)]]);


})

.add('Erlscripten Purescript + Array with Int tag', function() {
let $$eval = function ($copy_v) {
    $tco_loop: while (true) {
        let v = $copy_v;
        if (v[0] === 0) {
            return v[1];
        };
        if (v[0] === 1) {
            $copy_v = [6, v[1], [0, 1]];
            continue $tco_loop;
        };
        if (v[0] === 2) {
            $copy_v = [6, v[1], [0, 2]];
            continue $tco_loop;
        };
        if (v[0] === 3) {
            $copy_v = [6, v[1], [0, 3]];
            continue $tco_loop;
        };
        if (v[0] === 4) {
            $copy_v = [6, v[1], [0, 4]];
            continue $tco_loop;
        };
        if (v[0] === 5) {
            $copy_v = [6, v[1], [0, 5]];
            continue $tco_loop;
        };
        if (v[0] === 6) {
            return $$eval(v[1]) + $$eval(v[2]) | 0;
        };
        if (v[0] === 7) {
            $copy_v = [12, v[1], [0, 1]];
            continue $tco_loop;
        };
        if (v[0] === 8) {
            $copy_v = [12, v[1], [0, 2]];
            continue $tco_loop;
        };
        if (v[0] === 9) {
            $copy_v = [12, v[1], [0, 3]];
            continue $tco_loop;
        };
        if (v[0] === 10) {
            $copy_v = [12, v[1], [0, 4]];
            continue $tco_loop;
        };
        if (v[0] === 11) {
            $copy_v = [12, v[1], [0, 5]];
            continue $tco_loop;
        };
        if (v[0] === 12) {
            return $$eval(v[1]) - $$eval(v[2]) | 0;
        };
        throw new Error("Failed pattern match at Bench2 (line 18, column 1 - line 18, column 20): " + [ v[0] ]);
    };
};

let c2 = function (a) {
    return [1, [2, [3, [4, [5, [0, a]]]]]];
};
let c1 = function (a) {
    return [7, [8, [9, [10, [11, [0, a]]]]]];
};
let main = $$eval([12, [6, c1(1337), c2(1337)], [6, c2(1337), c1(1337)]]);

})

.add('Baseline Purescript + Object with String tag', function() {

var $$eval = function (v) {
    if (v.tag === "Literal") {
        return v.value0;
    };
    if (v.tag === "AddOne") {
        return $$eval({tag: "Add", value0: v.value0, value1: {tag: "Literal", value0: 1}});
    };
    if (v.tag === "AddTwo") {
        return $$eval({tag: "Add", value0: v.value0, value1: {tag: "Literal", value0: 2}});
    };
    if (v.tag === "AddThree") {
        return $$eval({tag: "Add", value0: v.value0, value1: {tag: "Literal", value0: 3}});
    };
    if (v.tag === "AddFour") {
        return $$eval({tag: "Add", value0: v.value0, value1: {tag: "Literal", value0: 4}});
    };
    if (v.tag === "AddFive") {
        return $$eval({tag: "Add", value0: v.value0, value1: {tag: "Literal", value0: 5}});
    };
    if (v.tag === "Add") {
        return $$eval(v.value0) + $$eval(v.value1) | 0;
    };
    if (v.tag === "SubOne") {
        return $$eval({tag: "Sub", value0: v.value0, value1: {tag: "Literal", value0: 1}});
    };
    if (v.tag === "SubTwo") {
        return $$eval({tag: "Sub", value0: v.value0, value1: {tag: "Literal", value0: 2}});
    };
    if (v.tag === "SubThree") {
        return $$eval({tag: "Sub", value0: v.value0, value1: {tag: "Literal", value0: 3}});
    };
    if (v.tag === "SubFour") {
        return $$eval({tag: "Sub", value0: v.value0, value1: {tag: "Literal", value0: 4}});
    };
    if (v.tag === "SubFive") {
        return $$eval({tag: "Sub", value0: v.value0, value1: {tag: "Literal", value0: 5}});
    };
    if (v.tag === "Sub") {
        return $$eval(v.value0) - $$eval(v.value1) | 0;
    };
    throw new Error("Failed pattern match at Bench2 (line 18, column 1 - line 18, column 20): " + [ v[0] ]);
};
var c2 = function (a) {
    return {tag: "AddOne", value0: {tag: "AddTwo", value0: {tag: "AddThree", value0: {tag: "AddFour", value0: {tag: "AddFive", value0: {tag: "Literal", value0: a}}}}}};
};
var c1 = function (a) {
    return {tag: "SubOne", value0: {tag: "SubTwo", value0: {tag: "SubThree", value0: {tag: "SubFour", value0: {tag: "SubFive", value0: {tag: "Literal", value0: a}}}}}};
};
var main = $$eval({tag: "Sub", value0: {tag: "Add", value0: c1(1337), value1: c2(1337)}, value1: {tag: "Add", value0: c2(1337), value1: c1(1337)}});

})

.add('Erlscripten Purescript + Object with String tag', function() {


let $$eval = function ($copy_v) {
    $tco_loop: while (true) {
        let v = $copy_v;
        if (v.tag === "Literal") {
            return v[1];
        };
        if (v.tag === "AddOne") {
            $copy_v = {tag: "Add", value0: v.value0, value1: {tag: "Literal", value0: 1}};
            continue $tco_loop;
        };
        if (v.tag === "AddTwo") {
            $copy_v = {tag: "Add", value0: v.value0, value1: {tag: "Literal", value0: 2}};
            continue $tco_loop;
        };
        if (v.tag === "AddThree") {
            $copy_v = {tag: "Add", value0: v.value0, value1: {tag: "Literal", value0: 3}};
            continue $tco_loop;
        };
        if (v.tag === "AddFour") {
            $copy_v = {tag: "Add", value0: v.value0, value1: {tag: "Literal", value0: 4}};
            continue $tco_loop;
        };
        if (v.tag === "AddFive") {
            $copy_v = {tag: "Add", value0: v.value0, value1: {tag: "Literal", value0: 5}};
            continue $tco_loop;
        };
        if (v.tag === "Add") {
            return $$eval(v.value0) + $$eval(v.value1) | 0;
        };
        if (v.tag === "SubOne") {
            $copy_v = {tag: "Sub", value0: v.value0, value1: {tag: "Literal", value0: 1}};
            continue $tco_loop;
        };
        if (v.tag === "SubTwo") {
            $copy_v = {tag: "Sub", value0: v.value0, value1: {tag: "Literal", value0: 2}};
            continue $tco_loop;
        };
        if (v.tag === "SubThree") {
            $copy_v = {tag: "Sub", value0: v.value0, value1: {tag: "Literal", value0: 3}};
            continue $tco_loop;
        };
        if (v.tag === "SubFour") {
            $copy_v = {tag: "Sub", value0: v.value0, value1: {tag: "Literal", value0: 4}};
            continue $tco_loop;
        };
        if (v.tag === "SubFive") {
            $copy_v = {tag: "Sub", value0: v.value0, value1: {tag: "Literal", value0: 5}};
            continue $tco_loop;
        };
        if (v.tag === "Sub") {
            return $$eval(v.value0) - $$eval(v.value1) | 0;
        };
        throw new Error("Failed pattern match at Bench2 (line 18, column 1 - line 18, column 20): " + [ v[0] ]);
    };
};

let c2 = function (a) {
    return {tag: "AddOne", value0: {tag: "AddTwo", value0: {tag: "AddThree", value0: {tag: "AddFour", value0: {tag: "AddFive", value0: {tag: "Literal", value0: a}}}}}};
};
let c1 = function (a) {
    return {tag: "SubOne", value0: {tag: "SubTwo", value0: {tag: "SubThree", value0: {tag: "SubFour", value0: {tag: "SubFive", value0: {tag: "Literal", value0: a}}}}}};
};
let main = $$eval({tag: "Sub", value0: {tag: "Add", value0: c1(1337), value1: c2(1337)}, value1: {tag: "Add", value0: c2(1337), value1: c1(1337)}});


})


.add('Baseline Purescript + Object with Int tag', function() {

var $$eval = function (v) {
    if (v.tag === 0) {
        return v.value0;
    };
    if (v.tag === 1) {
        return $$eval({tag: 6, value0: v.value0, value1: {tag: 0, value0: 1}});
    };
    if (v.tag === 2) {
        return $$eval({tag: 6, value0: v.value0, value1: {tag: 0, value0: 2}});
    };
    if (v.tag === 3) {
        return $$eval({tag: 6, value0: v.value0, value1: {tag: 0, value0: 3}});
    };
    if (v.tag === 4) {
        return $$eval({tag: 6, value0: v.value0, value1: {tag: 0, value0: 4}});
    };
    if (v.tag === 5) {
        return $$eval({tag: 6, value0: v.value0, value1: {tag: 0, value0: 5}});
    };
    if (v.tag === 6) {
        return $$eval(v.value0) + $$eval(v.value1) | 0;
    };
    if (v.tag === 7) {
        return $$eval({tag: 12, value0: v.value0, value1: {tag: 0, value0: 1}});
    };
    if (v.tag === 8) {
        return $$eval({tag: 12, value0: v.value0, value1: {tag: 0, value0: 2}});
    };
    if (v.tag === 9) {
        return $$eval({tag: 12, value0: v.value0, value1: {tag: 0, value0: 3}});
    };
    if (v.tag === 10) {
        return $$eval({tag: 12, value0: v.value0, value1: {tag: 0, value0: 4}});
    };
    if (v.tag === 11) {
        return $$eval({tag: 12, value0: v.value0, value1: {tag: 0, value0: 5}});
    };
    if (v.tag === 12) {
        return $$eval(v.value0) - $$eval(v.value1) | 0;
    };
    throw new Error("Failed pattern match at Bench2 (line 18, column 1 - line 18, column 20): " + [ v[0] ]);
};
var c2 = function (a) {
    return {tag: 1, value0: {tag: 2, value0: {tag: 3, value0: {tag: 4, value0: {tag: 5, value0: {tag: 0, value0: a}}}}}};
};
var c1 = function (a) {
    return {tag: 7, value0: {tag: 8, value0: {tag: 9, value0: {tag: 10, value0: {tag: 11, value0: {tag: 0, value0: a}}}}}};
};
var main = $$eval({tag: 12, value0: {tag: 6, value0: c1(1337), value1: c2(1337)}, value1: {tag: 6, value0: c2(1337), value1: c1(1337)}});

})

.add('Erlscripten Purescript + Object with Int tag', function() {


let $$eval = function ($copy_v) {
    $tco_loop: while (true) {
        let v = $copy_v;
        if (v.tag === 0) {
            return v[1];
        };
        if (v.tag === 1) {
            $copy_v = {tag: 6, value0: v.value0, value1: {tag: 0, value0: 1}};
            continue $tco_loop;
        };
        if (v.tag === 2) {
            $copy_v = {tag: 6, value0: v.value0, value1: {tag: 0, value0: 2}};
            continue $tco_loop;
        };
        if (v.tag === 3) {
            $copy_v = {tag: 6, value0: v.value0, value1: {tag: 0, value0: 3}};
            continue $tco_loop;
        };
        if (v.tag === 4) {
            $copy_v = {tag: 6, value0: v.value0, value1: {tag: 0, value0: 4}};
            continue $tco_loop;
        };
        if (v.tag === 5) {
            $copy_v = {tag: 6, value0: v.value0, value1: {tag: 0, value0: 5}};
            continue $tco_loop;
        };
        if (v.tag === 6) {
            return $$eval(v.value0) + $$eval(v.value1) | 0;
        };
        if (v.tag === 7) {
            $copy_v = {tag: 12, value0: v.value0, value1: {tag: 0, value0: 1}};
            continue $tco_loop;
        };
        if (v.tag === 8) {
            $copy_v = {tag: 12, value0: v.value0, value1: {tag: 0, value0: 2}};
            continue $tco_loop;
        };
        if (v.tag === 9) {
            $copy_v = {tag: 12, value0: v.value0, value1: {tag: 0, value0: 3}};
            continue $tco_loop;
        };
        if (v.tag === 10) {
            $copy_v = {tag: 12, value0: v.value0, value1: {tag: 0, value0: 4}};
            continue $tco_loop;
        };
        if (v.tag === 11) {
            $copy_v = {tag: 12, value0: v.value0, value1: {tag: 0, value0: 5}};
            continue $tco_loop;
        };
        if (v.tag === 12) {
            return $$eval(v.value0) - $$eval(v.value1) | 0;
        };
        throw new Error("Failed pattern match at Bench2 (line 18, column 1 - line 18, column 20): " + [ v[0] ]);
    };
};

let c2 = function (a) {
    return {tag: 1, value0: {tag: 2, value0: {tag: 3, value0: {tag: 4, value0: {tag: 5, value0: {tag: 0, value0: a}}}}}};
};
let c1 = function (a) {
    return {tag: 7, value0: {tag: 8, value0: {tag: 9, value0: {tag: 10, value0: {tag: 11, value0: {tag: 0, value0: a}}}}}};
};
let main = $$eval({tag: 12, value0: {tag: 6, value0: c1(1337), value1: c2(1337)}, value1: {tag: 6, value0: c2(1337), value1: c1(1337)}});


})



// add listeners
.on('cycle', function(event) {
  console.log(String(event.target));
})
.on('complete', function() {
  console.log('Fastest is ' + this.filter('fastest').map('name'));
})
// run async
.run({ 'async': true });

